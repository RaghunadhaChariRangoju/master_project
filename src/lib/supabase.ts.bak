// This file now re-exports the API modules for backward compatibility
// New code should use the more specific imports from @/lib/api directly

import { supabase } from './api/client';
import { productApi } from './api/products';
import { profileApi } from './api/profiles';
import { orderApi } from './api/orders';

// Supabase configuration
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://okdfoduvrbhpdqqlsryh.supabase.co';
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9rZGZvZHV2cmJocGRxcWxzcnloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0MDkxNDYsImV4cCI6MjA1MTk4NTE0Nn0.qNM_6_sn7IIYXbC4ihBCxQpnmB8qeuGwz9BuGrPjPRs';

// Create a single supabase client for interacting with your database
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

// Product-related functions
export const productApi = {
  // Get all products with optional filtering
  getProducts: async (options: { category?: string; search?: string } = {}) => {
    let query = supabase.from('products').select('*');

    if (options.category) {
      query = query.eq('category', options.category);
    }
    
    if (options.search) {
      query = query.ilike('name', `%${options.search}%`);
    }
    
    const { data, error } = await query.order('name');
    
    if (error) {
      console.error('Error fetching products:', error);
      throw error;
    }
    
    return data;
  },
  
  // Get a single product by ID
  getProductById: async (id: string) => {
    const { data, error } = await supabase
      .from('products')
      .select('*')
      .eq('id', id)
      .single();
    
    if (error) {
      console.error(`Error fetching product ${id}:`, error);
      throw error;
    }
    
    return data;
  },
};

// Profile-related functions
export const profileApi = {
  // Get the current user's profile
  getCurrentProfile: async (userId: string) => {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) {
      console.error('Error fetching profile:', error);
      throw error;
    }
    
    return data;
  },
  
  // Update a user's profile
  updateProfile: async (userId: string, updates: { name?: string; phone?: string; address?: string }) => {
    const { data, error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();
    
    if (error) {
      console.error('Error updating profile:', error);
      throw error;
    }
    
    return data;
  },
};

// Orders-related functions
export const orderApi = {
  // Create a new order
  createOrder: async (order: {
    user_id: string;
    total_amount: number;
    shipping_address: string;
    status?: string;
    items: Array<{
      product_id: string;
      quantity: number;
      price: number;
    }>
  }) => {
    // Start a transaction to create order and order items
    const { data: orderData, error: orderError } = await supabase
      .from('orders')
      .insert({
        user_id: order.user_id,
        total_amount: order.total_amount,
        shipping_address: order.shipping_address,
        status: order.status || 'pending'
      })
      .select()
      .single();
    
    if (orderError) {
      console.error('Error creating order:', orderError);
      throw orderError;
    }
    
    // Create order items with the order_id
    const orderItems = order.items.map(item => ({
      order_id: orderData.id,
      product_id: item.product_id,
      quantity: item.quantity,
      price: item.price
    }));
    
    const { error: itemsError } = await supabase
      .from('order_items')
      .insert(orderItems);
    
    if (itemsError) {
      console.error('Error creating order items:', itemsError);
      throw itemsError;
    }
    
    return orderData;
  },
  
  // Get user orders
  getUserOrders: async (userId: string) => {
    const { data, error } = await supabase
      .from('orders')
      .select(`
        *,
        order_items(*)
      `)
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error fetching user orders:', error);
      throw error;
    }
    
    return data;
  },
};

export default supabase;
